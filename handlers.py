import io
import json
import logging
import traceback
from telegram import Update, InlineKeyboardMarkup, Message, ReplyKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
import telegram.ext as tel
from datetime import datetime, timedelta
import tel_consts as tc
from tel_answers_generator import answers_generator, get_json_params, parse_params
from tel_menu import get_main_menu, make_buttons_menu
from utils import create_shared_file, read_qr_code, send_error
from handlers_common import reply_by_ident


async def check_user(user_name, chat_id):
    res = False
    if user_name:
        frame = await answers_generator.get_data_frame(tc.TEL_START, login='@' + user_name, chat_id=chat_id)
        res = not frame.empty
    return res


# start
async def start(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message.chat.type == 'group' or update.message.chat.type == 'supergroup':
            return

        if not update.message.from_user.username:
            await update.message.reply_text('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º '
                                            '–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!')
            return
        if not await check_user(update.message.from_user.username, update.message.chat_id):
            # –æ—Ç–∫–∞–∑
            await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
        else:
            keyboard = make_buttons_menu(get_main_menu(tc.TEL_MAIN_MENU))
            await update.message.reply_text(
                "–ß—Ç–æ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?\n–ü–æ–º–æ—â—å: /help",
                reply_markup=ReplyKeyboardMarkup(keyboard, selective=False, resize_keyboard=True,
                                                 one_time_keyboard=False)
            )

            # –∑–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            # await notifications(update, context)
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –ø–µ—á–∞—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é
async def print_help(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message.chat.type == 'group' or update.message.chat.type == 'supergroup':
            return

        if not await check_user(update.message.from_user.username, update.message.chat_id):
            # –æ—Ç–∫–∞–∑
            await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
        else:
            with open('help.txt', 'r', encoding="utf-8") as ff:
                text = ff.read()
            await update.message.reply_text(text, parse_mode=ParseMode.HTML)

            # –∑–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            # await notifications(update, context)
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –ø–æ–¥–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ –º–µ–Ω—é
async def replace_keyboard(menu: int, item: int, _id: int, message: Message):
    keyboard_items = answers_generator.menu.get_keyboard_items(menu, item, _id)
    keyboard = [[InlineKeyboardButton(y[0], callback_data=get_json_params(**y[1])) for y in x]
                for x in keyboard_items]
    await message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def query_handler(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    command_list = {
        '–ø–æ–∏—Å–∫': None
    }
    try:

        if update.callback_query.message.chat.type == 'group' or \
                update.callback_query.message.chat.type == 'supergroup':
            return

        text = ''
        command, text1 = get_command(update.callback_query.message.text.lower(), command_list)
        if command:
            if command == '–ø–æ–∏—Å–∫':
                text = text1[1:len(text1) - 1:]

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–Ω—é
        params = json.loads(update.callback_query.data)
        if params['ident'] == tc.TEL_MENU:
            await replace_keyboard(menu=params['_type'],
                                   item=params['ext'],
                                   _id=params['_id'],
                                   message=update.callback_query.message)
            return

        if not update.callback_query.from_user.username:
            await update.callback_query.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            return

        # –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç
        await reply_by_ident(update.callback_query.data,
                             context.bot,
                             update.callback_query.message,
                             update.callback_query.message.chat_id,
                             '@' + update.callback_query.from_user.username,
                             text=text)

        # –ø—É—Å—Ç–æ –æ—Ç–≤–µ—Ç, —É–±—Ä–∞—Ç—å —á–∞—Å—ã –Ω–∞ –∫–Ω–æ–ø–∫–µ
        # –µ—Å–ª–∏ –æ—Ç—Å—ã–ª–∞–µ—Ç –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ - –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É –Ω–∞ answer - Time Out
        try:
            await update.callback_query.answer('')
        except (Exception,):
            pass

    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –æ—Ç–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
def get_command(s, command_list):
    commands = list(command_list.keys())
    commands.sort(key=len)
    for command in commands[::-1]:
        if s[:len(command)] == command:
            return command, s[len(command) + 1::].strip()
    return '', s.strip()


# –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º, –≥–¥–µ –∏—Å–∫–∞—Ç—å
async def select_search(update: Update, context: tel.ContextTypes.DEFAULT_TYPE, text: str):
    items: list[list[str]] = [
        ["üîç –ö–ª–∏–µ–Ω—Ç—ã", tc.TEL_CLIENTS],
        ["üîç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", tc.TEL_STAFF],
        ["üîç –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã", tc.TEL_CONTR_CLIENTS],
        ["üîç –ó–∞–¥–∞—á–∏", tc.TEL_NEW_TASKS],
        ["üîç –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã", tc.TEL_DOCUMENTS],
        ["üîç –°—á–µ—Ç–∞", tc.TEL_NEW_ACCOUNTS],
        ["üîç –î–æ–∫—É–º–µ–Ω—Ç—ã", tc.TEL_NEW_COORDINATIONS],
        ["üîç –ó–∞—è–≤–∫–∏", tc.TEL_PETITIONS],
        ["üîç –ü–æ–∫–∞–∑—ã", tc.TEL_SHOW_SHEETS],
        ["üîç –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", tc.TEL_SPECIFICATION],
    ]

    await context.bot.send_message(
        text='–ü–æ–∏—Å–∫ "' + text + '"',
        parse_mode=ParseMode.HTML,
        reply_to_message_id=update.message.id,
        chat_id=update.message.chat_id,
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(x[0], callback_data=get_json_params(x[1]))] for x in items]
        ))


# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def document_handler(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message.chat.type == 'group' or update.message.chat.type == 'supergroup':
            return

        if not update.message.reply_to_message:
            # –ø—Ä–æ–±—É–µ–º —Å—á–∏—Ç–∞—Ç—å QR
            check = False

            if update.message.photo:
                file_name = 'image.png'
                file_id = update.message.photo[-1].file_id

                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
                file = await context.bot.get_file(file_id)
                await file.download_to_drive(file_name)
                # —á–∏—Ç–∞–µ–º –∫–æ–¥
                value = read_qr_code(file_name)
                if value:
                    check = True
                    value = value.decode("utf-8")
                    await update.message.reply_text(value)
                    await reply_by_ident(get_json_params(tc.TEL_SPECIFICATION),
                                         context.bot,
                                         update.message,
                                         update.message.chat_id,
                                         '@' + update.message.from_user.username,
                                         text=value)

            # –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            if not check:
                await update.message.reply_text('–ß—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª - –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, '
                                                '–∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª!')
            return

        # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª—ã
        kb = update.message.reply_to_message.reply_markup.inline_keyboard
        if (len(kb) > 0) and (len(kb[0]) > 0):
            # –∏–∑ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä—Å–∏–º id
            params = parse_params(kb[0][0].callback_data)
            _type = params['_type']
            _id = params['_id']

            # –ø–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
            frame = await answers_generator.get_data_frame(tc.TEL_FILES_FOLDER)
            if frame.empty:
                return
            file_name = ''
            file_id = None
            # —Ñ–æ—Ç–æ
            if update.message.photo:
                file_name = 'image.jpg'
                file_id = update.message.photo[-1].file_id
            # –¥–æ–∫—É–º–µ–Ω—Ç
            if update.message.document:
                file_name = update.message.document.file_name
                file_id = update.message.document.file_id

            if not file_id:
                return

            # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é os.join –∏ –ø—Ä–æ—á–µ–µ - —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥ windows –≤ Linux
            # —Å—Ç—Ä–æ–∫–∞ –Ω—É–∂–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Windows –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
            # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø–æ –¥–∞—Ç–µ
            date_dir = datetime.strftime(datetime.now(), '%Y_%m_%d')
            file_dir = frame['s'][0] + '\\' + date_dir
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(file_id)
            f = io.BytesIO()
            await file.download_to_memory(f)
            f.seek(0)
            file_name = create_shared_file(file_dir, file_name, f)
            file_name = file_dir + '\\' + file_name

            # –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
            await answers_generator.exec_empty(tc.TEL_INSERT_FILE,
                                               login='@' + update.message.from_user.username,
                                               _type=_type,
                                               _id=_id,
                                               file_name=file_name,
                                               description=update.message.caption)
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
async def text_handler(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞
        if update.message.chat.type == 'group' or update.message.chat.type == 'supergroup':
            if update.message.text.lower() == 'chat_id':
                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id —á–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
                await answers_generator.exec_empty(
                    tc.TEL_SAVE_CHAT,
                    chat_id=update.message.chat.id,
                    description=update.message.chat.title)
            return

        if update.message is None:
            return
        if update.message.reply_to_message is None:
            # —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏–º –º–µ–Ω—é
            menu = get_main_menu(update.message.text)
            if menu:
                keyboard = make_buttons_menu(menu)
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
                    reply_markup=ReplyKeyboardMarkup(keyboard, selective=False, resize_keyboard=True,
                                                     one_time_keyboard=False)
                )
                return

            # –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—é - —Å–º–æ—Ç—Ä–∏–º –∫–æ–º–∞–Ω–¥—ã
            # command_list -—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–∫—Å—Ç–æ–º
            command, text = get_command(update.message.text.lower(), tc.command_list)
            # –Ω–µ –∏—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
            if (text != '') and (len(text.strip()) < 5):
                await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞! –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.')
                return
            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
            if command:
                ident = tc.command_list[command]
                await reply_by_ident(
                    get_json_params(ident=ident),
                    context.bot,
                    update.message,
                    update.message.chat_id,
                    '@' + update.message.from_user.username,
                    text=text)
                return
            else:
                # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞—à–ª–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º - –≥–¥–µ –∏—Å–∫–∞—Ç—å —Ç–µ–∫—Å—Ç
                await select_search(update, context, text)
                # await update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
        # –∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        else:
            sended = False
            if update.message.reply_to_message.reply_markup:
                kb = update.message.reply_to_message.reply_markup.inline_keyboard
                if (len(kb) > 0) and (len(kb[0]) > 0):
                    # –∏–∑ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä—Å–∏–º id
                    params = parse_params(kb[0][0].callback_data)
                    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
                    ident = tc.TEL_NOTE
                    _type = params['_type']

                    sended = True
                    if _type != 0:
                        await reply_by_ident(
                            get_json_params(ident=ident, _id=params['_id'], _type=_type),
                            context.bot,
                            update.message,
                            update.message.chat_id,
                            '@' + update.message.from_user.username,
                            text=update.message.text
                        )
            if not sended:
                await context.bot.send_message(update.message.chat_id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞–¥–æ –Ω–∞ '
                                                                       '—Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫–Ω–æ–ø–∫–∏.')
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def callback_notifications(context: tel.CallbackContext):
    try:
        frame = await answers_generator.get_answer(get_json_params(ident=tc.TEL_USERS))
        for i, row in frame.iterrows():
            user = row['Login']
            chat_id = row['Chat_id']
            await reply_by_ident(
                get_json_params(ident=tc.TEL_NOTIFICATIONS),
                context.bot,
                None,
                chat_id,
                login=user,
                date=datetime.now() - timedelta(minutes=2))

    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + context.job.data['username'])
        await send_error(context, traceback.format_exc())


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_messages(context: tel.CallbackContext):
    try:
        frame = await answers_generator.get_frame(tc.TEL_GET_MESSAGES)
        for i, row in frame.iterrows():
            try:
                s = row['message'].format_map(tc.img_lib)
                await context.bot.send_message(row['chat_id'], s, parse_mode=ParseMode.HTML)
            except (Exception,):
                await send_error(context, traceback.format_exc())
            await answers_generator.exec_empty(tc.TEL_SET_MESSAGE_SENT, id=row['id'])
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –≤–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def start_jobs(job_queue):
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º job –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
    job_queue.run_repeating(callback_notifications, interval=120, first=10, data={})

    job_queue.run_repeating(send_messages, interval=60, first=10, data={})
