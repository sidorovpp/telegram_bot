import logging
import traceback
from telegram import Update, InlineKeyboardMarkup, Message, ReplyKeyboardMarkup, InlineKeyboardButton, Bot
from telegram.constants import ParseMode
import telegram.ext as tel
from pathlib import Path
from os.path import join, exists, splitext
from datetime import datetime
import tel_consts as tc
from tel_answers_generator import answers_generator, get_json_params, parse_params


def check_user(user_name, chat_id):
    res = False
    if user_name:
        frame = answers_generator.get_data_frame(tc.TEL_START, login='@' + user_name, chat_id=chat_id)
        res = not frame.empty
    return res


async def send_error(context, text):
    try:
        # –ø–æ—Å—ã–ª–∞—é —Å–µ–±–µ —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–æ–π
        await context.bot.send_message(1535958791, text)
    except (Exception,):
        logging.error(traceback.format_exc())
    pass


# start
async def start(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not update.message.from_user.username:
            await update.message.reply_text('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º '
                                            '–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!')
            return
        if not check_user(update.message.from_user.username, update.message.chat_id):
            # –æ—Ç–∫–∞–∑
            await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
        else:
            keyboard = [
                ['–î–æ–∫—É–º–µ–Ω—Ç—ã', '–ó–∞–¥–∞—á–∏', '–°—á–µ—Ç–∞'],
            ]
            await update.message.reply_text(
                "–ß—Ç–æ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?\n–ü–æ–º–æ—â—å: /help",
                reply_markup=ReplyKeyboardMarkup(keyboard, selective=False, resize_keyboard=True,
                                                 one_time_keyboard=False)
            )

            # –∑–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await notifications(update, context)
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –ø–µ—á–∞—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é
async def print_help(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not check_user(update.message.from_user.username, update.message.chat_id):
            # –æ—Ç–∫–∞–∑
            await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
        else:
            with open('help.txt', 'r', encoding="utf-8") as ff:
                text = ff.read()
            await update.message.reply_text(text, parse_mode=ParseMode.HTML)

            # –∑–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await notifications(update, context)
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥–ª–∏–Ω—É
async def send_message(bot: Bot, message: Message, chat_id: int, text: str,
                       reply_markup: InlineKeyboardMarkup, files: list, login: str):
    if text == '':
        text = '–ü—É—Å—Ç–æ'
    if message:
        message_id = message.id
    else:
        message_id = None

    while len(text) > 4000:
        temp = text[:4000:]
        # –∏—â–µ–º —Ç–∞–≥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π
        k = temp[::-1].find('/<')
        # –∏—â–µ–º —Ç–∞–≥ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π
        k1 = temp[::-1].find('<')
        # –æ—Ç—Ä–µ–∑–∞–µ–º –¥–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–∫—Ä—ã—Ç
        if (k1 - 1 < k) and (k1 != -1):
            temp = temp[:len(temp) - k1 - 1:]

        await bot.send_message(
            text=temp,
            parse_mode=ParseMode.HTML,
            reply_to_message_id=message_id,
            chat_id=chat_id
        )
        text = text[len(temp)::]
    # –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.send_message(
        text=text,
        parse_mode=ParseMode.HTML,
        reply_to_message_id=message_id,
        chat_id=chat_id,
        reply_markup=reply_markup
    )

    # —Ñ–∞–π–ª—ã
    if files:
        for ff in files:
            if ff['TelegramIdent'] is not None:
                await bot.send_document(
                    document=ff['TelegramIdent'],
                    caption=ff['Description'],
                    reply_to_message_id=message_id,
                    chat_id=chat_id
                )
            else:
                mes = await bot.send_document(
                    document=open(ff['FileName'], 'rb'),
                    read_timeout=70,
                    write_timeout=60,
                    caption=ff['Description'],
                    reply_to_message_id=message_id,
                    chat_id=chat_id
                )
                # –∑–∞–ø–∏—Å—ã–≤–µ–º –≤ —Ñ–∞–π–ª id –≤ Telegram
                answers_generator.exec_empty(ident=tc.TEL_UPDATE_FILE,
                                             _id=ff['_id'],
                                             file_ident=mes.document.file_id,
                                             login=login)
    # –ø–∏—à–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –ª–æ–≥
    logging.info('–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {text}'.format(chat_id=chat_id, text=text[:100:]))


# –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
async def reply_by_ident(ident, bot, message, chat_id, login, **kwargs):
    res = answers_generator.get_answer(ident, login=login, **kwargs)
    if type(res) == tuple:
        # –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
        text, keyboard, files = res
        await send_message(
            bot=bot,
            message=message,
            chat_id=chat_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            files=files,
            login=login
        )
    else:
        # –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤ - –ø–æ—Å—ã–ª–∞–µ–º –≤—Å–µ
        for i in res:
            text, keyboard, files = i
            await send_message(
                bot=bot,
                message=message,
                chat_id=chat_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                files=files,
                login=login
            )


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def query_handler(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    command_list = {
        '–ø–æ–∏—Å–∫': None
    }
    try:
        text = ''
        command, text1 = get_command(update.callback_query.message.text.lower(), command_list)
        if command:
            if command == '–ø–æ–∏—Å–∫':
                text = text1[1:len(text1) - 1:]

        # –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç
        await reply_by_ident(update.callback_query.data,
                             context.bot,
                             update.callback_query.message,
                             update.callback_query.message.chat_id,
                             '@' + update.callback_query.from_user.username,
                             text=text)

        # –ø—É—Å—Ç–æ –æ—Ç–≤–µ—Ç, —É–±—Ä–∞—Ç—å —á–∞—Å—ã –Ω–∞ –∫–Ω–æ–ø–∫–µ
        # –µ—Å–ª–∏ –æ—Ç—Å—ã–ª–∞–µ—Ç –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ - –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É –Ω–∞ answer - Time Out
        try:
            await update.callback_query.answer('')
        except (Exception,):
            pass

    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –æ—Ç–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
def get_command(s, command_list):
    commands = list(command_list.keys())
    commands.sort(key=len)
    for command in commands[::-1]:
        if s[:len(command)] == command:
            return command, s[len(command) + 1::].strip()
    return '', s.strip()


# –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º, –≥–¥–µ –∏—Å–∫–∞—Ç—å
async def select_search(update: Update, context: tel.ContextTypes.DEFAULT_TYPE, text: str):
    items: list[list[str]] = [
        ["üîç –ö–ª–∏–µ–Ω—Ç—ã", tc.TEL_CLIENTS],
        ["üîç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", tc.TEL_STAFF],
        ["üîç –ó–∞–¥–∞—á–∏", tc.TEL_NEW_TASKS],
        ["üîç –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã", tc.TEL_DOCUMENTS],
        ["üîç –°—á–µ—Ç–∞", tc.TEL_NEW_ACCOUNTS],
        ["üîç –î–æ–∫—É–º–µ–Ω—Ç—ã", tc.TEL_NEW_COORDINATIONS],
    ]

    await context.bot.send_message(
        text='–ü–æ–∏—Å–∫ "' + text + '"',
        parse_mode=ParseMode.HTML,
        reply_to_message_id=update.message.id,
        chat_id=update.message.chat_id,
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(x[0], callback_data=get_json_params(x[1]))] for x in items]
        ))


# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def document_handler(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not update.message.reply_to_message:
            await update.message.reply_text('–ß—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª - –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, '
                                            '–∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª!')
            return
        kb = update.message.reply_to_message.reply_markup.inline_keyboard
        if (len(kb) > 0) and (len(kb[0]) > 0):
            # –∏–∑ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä—Å–∏–º id
            params = parse_params(kb[0][0].callback_data)
            _type = params['_type']
            _id = params['_id']

            # –ø–æ—É–ª—á–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
            frame = answers_generator.get_data_frame(tc.TEL_FILES_FOLER)
            if frame.empty:
                return
            file_name = ''
            file_id = None
            # —Ñ–æ—Ç–æ
            if update.message.photo:
                file_name = 'image.jpg'
                file_id = update.message.photo[-1].file_id
            # –¥–æ–∫—É–º–µ–Ω—Ç
            if update.message.document:
                file_name = update.message.document.file_name
                file_id = update.message.document.file_id

            if not file_id:
                return

            # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø–æ –¥–∞—Ç–µ
            date_dir = datetime.strftime(datetime.now(), '%Y_%m_%d')
            file_dir = join(frame['s'][0], date_dir)
            Path(file_dir).mkdir(parents=True, exist_ok=True)

            file_name = join(file_dir, file_name)

            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è—è –≤ –∫–æ–Ω—Ü–µ –Ω–æ–º–µ—Ä
            i = 0
            while exists(file_name):
                split = splitext(file_name)
                # print(split)
                file_name = join(file_dir, split[0] + str(i) + split[1])
                i = i + 1

            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(file_id)
            with open(file_name, 'wb+') as _f:
                await file.download(out=_f)

            # –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
            answers_generator.exec_empty(tc.TEL_INSERT_FILE,
                                         login='@' + update.message.from_user.username,
                                         _type=_type,
                                         _id=_id,
                                         file_name=file_name,
                                         description=update.message.caption)
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
async def text_handler(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–∫—Å—Ç–æ–º
        if update.message.reply_to_message is None:
            command, text = get_command(update.message.text.lower(), tc.command_list)
            # –Ω–µ –∏—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
            if (text != '') and (len(text.strip()) < 5):
                await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞! –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–æ–≤–æ–ª–æ–≤.')
                return
            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
            if command:
                ident = tc.command_list[command]
                await reply_by_ident(
                    get_json_params(ident=ident),
                    context.bot,
                    update.message,
                    update.message.chat_id,
                    '@' + update.message.from_user.username,
                    text=text)
                return
            else:
                # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞—à–ª–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º - –≥–¥–µ –∏—Å–∫–∞—Ç—å —Ç–µ–∫—Å—Ç
                await select_search(update, context, text)
                # await update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
        # –∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        else:
            kb = update.message.reply_to_message.reply_markup.inline_keyboard
            if (len(kb) > 0) and (len(kb[0]) > 0):
                # –∏–∑ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä—Å–∏–º id
                params = parse_params(kb[0][0].callback_data)
                # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
                ident = tc.TEL_NOTE
                _type = params['_type']

                if _type != 0:
                    await reply_by_ident(
                        get_json_params(ident=ident, _id=params['_id'], _type=_type),
                        context.bot,
                        update.message,
                        update.message.chat_id,
                        '@' + update.message.from_user.username,
                        text=update.message.text
                    )
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–∞ —É–≤–µ–¥–æ–º–µ–Ω–∏–π
async def callback_notifications(context: tel.CallbackContext):
    try:
        await reply_by_ident(
            get_json_params(ident=tc.TEL_NOTIFICATIONS),
            context.bot,
            None,
            context.job.chat_id,
            context.job.data['username'],
            date=context.job.data['date'])

        context.job.data['date'] = datetime.now()
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def notifications(update: Update, context: tel.ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ
        for j in context.job_queue.jobs():
            if j.data['username'] == '@' + update.message.from_user.username:
                return
        await context.bot.send_message(chat_id=update.message.chat_id, text="–ó–∞–ø—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        c = {'username': '@' + update.message.from_user.username, 'date': datetime.now()}
        context.job_queue.run_repeating(callback_notifications, interval=120, first=10, data=c,
                                        chat_id=update.message.chat_id)
    except (Exception,):
        logging.error(traceback.format_exc())
        await send_error(context, traceback.format_exc())


# –≤–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–Ω–∏–π –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def start_jobs(job_queue):
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º job –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
    frame = answers_generator.get_answer(get_json_params(ident=tc.TEL_USERS))
    for i, row in frame.iterrows():
        c = {'username': row['Login'], 'date': datetime.now()}
        job_queue.run_repeating(callback_notifications, interval=120, first=10, data=c, chat_id=row['Chat_id'])
