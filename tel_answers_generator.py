import tel_consts as tc
import json
from telegram import InlineKeyboardButton
from sql_generator import SQLGenerator
from sql_execute import SQLExecuter


# —É–ø–∞–∫–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ JSON —Å—Ç—Ä–æ–∫—É
def get_json_params(ident, _id=0, _type=0, ext=0):
    d = dict()
    d['ident'] = ident
    d['_id'] = _id
    d['_type'] = _type
    d['ext'] = ext
    return json.dumps(d)


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ JSON
def parse_params(ident, **kwargs):
    # —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = json.loads(ident)
    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    for k in kwargs:
        if k not in params:
            params[k] = kwargs[k]
    return params


# –∑–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–∞–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å html —Ä–∞–∑–º–µ—Ç–∫—É
def replace_symbols(text: str):
    if text:
        text = text.replace('<', '&lt;')
        text = text.replace('>', '&gt;')
    return text


# –ø–µ—Ä–µ–ø–∏—Å–∫–∞  –¥–æ–∫—É–º–µ–Ω—Ç—É
def get_doc_with_notes(format_str, frame):
    text = format_str
    if not frame.empty:
        if frame['NoteUser'][0] is not None:
            for i, row in frame.iterrows():
                text = text + '\n\n<b>{NoteUser}</b>  <i>{NoteDate}</i>\n{NoteText}'.format(
                    NoteUser=row['NoteUser'],
                    NoteText=replace_symbols(row['NoteText']),
                    NoteDate=row['NoteDate'],
                )
    return text


class AnswersGenerator:
    sql_executor: SQLExecuter

    def __init__(self):
        self.SG = SQLGenerator()

        self.proc_list = {
            tc.TEL_USERS: self.get_frame,
            tc.TEL_VISA: self.get_visa,
            tc.TEL_NOTE: self.get_note,
            tc.TEL_READED: self.get_readed,

            tc.TEL_NEW_TASKS: self.get_new_tasks,
            tc.TEL_TASK: self.get_task,
            tc.TEL_READ_TASK: self.get_read_task,

            tc.TEL_NEW_ACCOUNTS: self.get_new_accounts,
            tc.TEL_ACCOUNT: self.get_account,
            tc.TEL_AGREE_ACCOUNT: self.get_agree_account,
            tc.TEL_DISAGREE_ACCOUNT: self.get_agree_account,
            tc.TEL_IGNORE_ACCOUNT: self.get_agree_account,

            tc.TEL_NEW_COORDINATIONS: self.get_new_coordinations,
            tc.TEL_COORDINATION: self.get_coordination,
            tc.TEL_AGREE_COORDINATION: self.get_agree_coordination,
            tc.TEL_DISAGREE_COORDINATION: self.get_agree_coordination,
            tc.TEL_BACK_COORDINATION: self.get_agree_coordination,

            tc.TEL_DOCUMENTS: self.get_documents,
            tc.TEL_DOCUMENT: self.get_document,

            tc.TEL_CLIENTS: self.get_clients,
            tc.TEL_CLIENT: self.get_client,

            tc.TEL_NOTIFICATIONS: self.get_notifications,

            tc.TEL_FILES: self.get_files,
        }

    def exec_empty(self, ident, **kwargs):
        return self.sql_executor.exec_empty(self.SG.get_sql_text(ident, **kwargs))

    def get_data_frame(self, ident, **kwargs):
        return self.sql_executor.exec(self.SG.get_sql_text(ident, **kwargs))

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    def get_answer(self, ident, **kwargs):
        params = parse_params(ident, **kwargs)
        if params['ident'] in self.proc_list.keys():
            return self.proc_list[params['ident']](**params)
        else:
            return self.get_default(**params)

    # –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä—ç–π–º–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
    def get_frame(self, ident, **kwargs):
        frame = self.get_data_frame(ident, **kwargs)
        return frame

    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    def get_default(self, ident, **kwargs):
        frame = self.get_data_frame(ident, **kwargs)
        text = ''
        if not frame.empty:
            for i, row in frame.iterrows():
                for k in row:
                    text = text + '\n' + k
                    text = text.strip()
                text = text + '\n\n'
        return text, [], []

    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    def get_files(self, ident, **kwargs):
        files = []
        frame = self.get_frame(ident, **kwargs)
        if not frame.empty:
            for i, row in frame.iterrows():
                files.append({'_id': row['_id'],
                              'FileName': row['FileName'],
                              'TelegramIdent': row['TelegramIdent'],
                              'Description': replace_symbols(row['Description'])})
        text = ''
        match kwargs['_type']:
            case tc.TEL_TASK_ID:
                text = '–§–∞–π–ª–æ–≤ –ø–æ –∑–∞–¥–∞—á–µ –Ω–∞–π–¥–µ–Ω–æ: ' + str(len(files))
            case tc.TEL_ACCOUNT_ID:
                text = '–§–∞–π–ª–æ–≤ –ø–æ —Å—á—ë—Ç—É –Ω–∞–π–¥–µ–Ω–æ: ' + str(len(files))
            case tc.TEL_COORDINATION_ID:
                text = '–§–∞–π–ª–æ–≤ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É –Ω–∞–π–¥–µ–Ω–æ: ' + str(len(files))
            case tc.TEL_DOCUMENT_ID:
                text = '–§–∞–π–ª–æ–≤ –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—É –Ω–∞–π–¥–µ–Ω–æ: ' + str(len(files))
        return text, [], files

    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–µ
    def get_task(self, ident, **kwargs):
        keyboard_items = \
            [
                [
                    ["üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", {"ident": tc.TEL_READ_TASK,
                                     "_id": kwargs["_id"],
                                     "_type": tc.TEL_TASK_ID}],
                    ["üìÅ –§–∞–π–ª—ã", {"ident": tc.TEL_FILES,
                                 "_id": kwargs["_id"],
                                 "_type": tc.TEL_TASK_ID}],
                    ["üëÄ –ö—Ç–æ —Å–º–æ—Ç—Ä–µ–ª", {"ident": tc.TEL_READED,
                                       "_id": kwargs["_id"],
                                       "_type": tc.TEL_TASK_ID}],
                ],
                [
                    ["üìì –ó–∞–¥–∞—á–∏", {"ident": tc.TEL_NEW_TASKS}],
                ]
            ]
        frame = self.get_data_frame(ident, **kwargs)
        if not frame.empty:
            urg = '‚ùó' if frame['UrgencyID'][0] == 6 else ''
            text = tc.TEL_TASK_STATES[frame['CurrentStateID'][0]] + urg + frame['Info'][0]
            text = get_doc_with_notes(text, frame)

            keyboard = [[InlineKeyboardButton(y[0], callback_data=get_json_params(**y[1])) for y in x]
                        for x in keyboard_items]

            return text, keyboard, []

    # —á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É
    def get_read_task(self, ident, **kwargs):
        # –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π
        self.exec_empty(ident, _id=kwargs['_id'], login=kwargs['login'])
        # –≤—ã–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç "–ó–∞–¥–∞—á–∏"
        return self.get_new_tasks(tc.TEL_NEW_TASKS, login=kwargs['login'])

    # –ø–∏—à–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
    def get_note(self, ident, **kwargs):
        # –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π
        self.exec_empty(ident, **kwargs)
        match kwargs['_type']:
            case tc.TEL_TASK_ID:
                return self.get_task(tc.TEL_TASK, _id=kwargs['_id'], login=kwargs['login'])
            case tc.TEL_ACCOUNT_ID:
                return self.get_account(tc.TEL_ACCOUNT, _id=kwargs['_id'], login=kwargs['login'])
            case tc.TEL_COORDINATION_ID:
                return self.get_coordination(tc.TEL_COORDINATION, _id=kwargs['_id'], login=kwargs['login'])

    # –≤–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç
    def get_agree_account(self, ident, **kwargs):
        # –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π
        self.exec_empty(ident, _id=kwargs['_id'], login=kwargs['login'])
        # –≤—ã–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç "–°—á–µ—Ç–∞"
        return self.get_new_accounts(tc.TEL_NEW_ACCOUNTS, kwargs['login'])

    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—á—ë—Ç—É
    def get_account(self, ident, **kwargs):
        keyboard_items = \
            [
                [
                    ["‚úÖ –ó–∞", {"ident": tc.TEL_AGREE_ACCOUNT,
                              "_id": kwargs["_id"],
                              "_type": tc.TEL_ACCOUNT_ID}],
                    ["‚ùå –ü—Ä–æ—Ç–∏–≤", {"ident": tc.TEL_DISAGREE_ACCOUNT,
                                  "_id": kwargs["_id"],
                                  "_type": tc.TEL_ACCOUNT_ID}],
                    ["‚¨Ü –ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", {"ident": tc.TEL_IGNORE_ACCOUNT,
                                         "_id": kwargs["_id"],
                                         "_type": tc.TEL_ACCOUNT_ID}],
                ],
                [
                    ["üìÅ –§–∞–π–ª—ã", {"ident": tc.TEL_FILES, "_id": kwargs["_id"], "_type": tc.TEL_ACCOUNT_ID}],
                    ["üñã –í–∏–∑—ã", {"ident": tc.TEL_VISA, "_id": kwargs["_id"], "_type": tc.TEL_ACCOUNT_ID}],
                    ["–ö—Ç–æ —Å–º–æ—Ç—Ä–µ–ª üëÄ", {"ident": tc.TEL_READED,
                                       "_id": kwargs["_id"],
                                       "_type": tc.TEL_ACCOUNT_ID}],
                ],
                [
                    ["üí∏ –°—á–µ—Ç–∞", {"ident": tc.TEL_NEW_ACCOUNTS}],
                ]
            ]

        frame = self.get_data_frame(ident, _id=kwargs['_id'], login=kwargs['login'])
        if not frame.empty:
            text = frame['Info'][0]
            text = get_doc_with_notes(text, frame)

            keyboard = [[InlineKeyboardButton(y[0], callback_data=get_json_params(**y[1])) for y in x]
                        for x in keyboard_items]

            return text, keyboard, []

    # —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    def get_new_tasks(self, ident, **kwargs):
        frame = self.get_data_frame(ident, **kwargs)
        text = '–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len}'.format(len=len(frame.index))
        keyboard = []
        for i, row in frame.iterrows():
            keyboard.append([
                InlineKeyboardButton('{CurrentState}{Number} - {Theme}'.format(
                    CurrentState=tc.TEL_TASK_STATES[row['CurrentState']],
                    Number=row['Number'],
                    Theme=replace_symbols(row['Theme'])),
                    callback_data=get_json_params(
                        ident=tc.TEL_TASK,
                        _id=row['_id']))
            ])
        return text, keyboard, []

    # —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
    def get_new_accounts(self, ident, login, **kwargs):
        frame = self.get_data_frame(ident, login=login, **kwargs)
        text = '–ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len}'.format(len=len(frame.index))
        keyboard = []
        for i, row in frame.iterrows():
            keyboard.append([
                InlineKeyboardButton('{CurrentState}{Number} {FirmName} {Summa}'.format(
                    CurrentState=tc.TEL_ACCOUNT_STATES[row['CurrentState']],
                    Summa=row['Summa'],
                    Number=row['Number'],
                    FirmName=row['FirmName']),
                    callback_data=get_json_params(
                        ident=tc.TEL_ACCOUNT,
                        _id=row['_id']))
            ])
        return text, keyboard, []

    # —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    def get_notifications(self, ident, **kwargs):

        # –∏—â–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
        def get_ident(object_id):
            r = None
            match object_id:
                case tc.TEL_ACCOUNT_ID:
                    r = tc.TEL_NEW_ACCOUNTS
                case tc.TEL_COORDINATION_ID:
                    r = tc.TEL_NEW_COORDINATIONS
                case tc.TEL_STAFF_ID:
                    r = tc.TEL_STAFF
                case tc.TEL_STAFF_REG_ID:
                    r = tc.TEL_STAFF
                case tc.TEL_ACCOUNT_REG_ID:
                    r = tc.TEL_NEW_ACCOUNTS
                case tc.TEL_CLIENT_ID:
                    r = tc.TEL_CLIENTS
                case tc.TEL_CLIENT_REG_ID:
                    r = tc.TEL_CLIENTS
                case tc.TEL_COORDINATION_REG_ID:
                    r = tc.TEL_NEW_COORDINATIONS
                case tc.TEL_TASK_REG_ID:
                    r = tc.TEL_NEW_TASKS
            return r

        frame = self.get_data_frame(ident, login=kwargs['login'], date=kwargs['date'])
        text = ''
        res = []
        if len(frame.index) > 0:
            for i, row in frame.iterrows():
                ident = get_ident(row['Object_id'])
                if ident:
                    s = '<b>{Date}</b>\n{Text}'.format(
                        Date=row['Date'],
                        Text=row['Text'])  # replace_symbols(row['Text'])) –Ω–µ –ø–æ–¥–º–µ–Ω—è—é —Ä–∞–∑–º–µ—Ç–∫—É –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö

                    res.append(
                        (s,
                         [
                             [InlineKeyboardButton("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                                                   callback_data=get_json_params(
                                                       ident=ident,
                                                       ext=row['_id']))]
                         ],
                         []
                         ))
                else:
                    text = text + '\n\n<b>{Date}</b>\n{Text}'.format(
                        Date=row['Date'],
                        Text=row['Text'],
                    )
            if text != '':
                res.append((text, [], []))
        return res

    # —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–∑
    def get_visa(self, ident, _id, **kwargs):
        frame = self.get_data_frame(ident, _id=_id, **kwargs)
        keyboard = []
        text = ''
        if not frame.empty:
            for i, row in frame.iterrows():
                text = text + '\n<b>{FIO}</b>:  <i>{Visa}</i>'.format(
                    FIO=row['FIO'],
                    Visa=row['Visa'],
                )
        else:
            text = '–ï—â—ë –Ω–µ –∑–∞–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–æ'
        return text, keyboard, []

    # —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–∑
    def get_readed(self, ident, _id, **kwargs):
        frame = self.get_data_frame(ident, _id=_id, **kwargs)
        keyboard = []
        text = ''
        if not frame.empty:
            for i, row in frame.iterrows():
                text = text + '\n<i>{Date}</i>  <b>{FIO}</b>'.format(
                    FIO=row['FIO'],
                    Date=row['Date'],
                )
        else:
            text = '–ù–∏–∫—Ç–æ –Ω–µ —á–∏—Ç–∞–ª'
        return text, keyboard, []

    # —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    def get_new_coordinations(self, ident, login, **kwargs):
        frame = self.get_data_frame(ident, login=login, **kwargs)
        text = '–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len}'.format(len=len(frame.index))
        keyboard = []
        for i, row in frame.iterrows():
            keyboard.append([
                InlineKeyboardButton('{CurrentState} {Number} {InitFIO} {ClientName} {Theme}'.format(
                    CurrentState=tc.TEL_COORD_STATES[row['CurrentState']],
                    Number=row['Number'],
                    Theme=row['Theme'],
                    InitFIO=row['InitFIO'],
                    ClientName=row['ClientName']),
                    callback_data=get_json_params(ident=tc.TEL_COORDINATION, _id=row['_id']))
            ])
        return text, keyboard, []

    # –¥–æ–∫—É–º–µ–Ω—Ç
    def get_coordination(self, ident, **kwargs):
        keyboard_items = \
            [

                [
                    ["‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", {"ident": tc.TEL_AGREE_COORDINATION,
                                       "_id": kwargs["_id"],
                                       "_type": tc.TEL_COORDINATION_ID}],
                    ["‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {"ident": tc.TEL_DISAGREE_COORDINATION,
                                     "_id": kwargs["_id"],
                                     "_type": tc.TEL_COORDINATION_ID}],
                    ["‚Ü© –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", {"ident": tc.TEL_BACK_COORDINATION,
                                        "_id": kwargs["_id"],
                                        "_type": tc.TEL_COORDINATION_ID}],
                ],
                [
                    ["üìÅ –§–∞–π–ª—ã", {"ident": tc.TEL_FILES, "_id": kwargs["_id"],
                                 "_type": tc.TEL_COORDINATION_ID}],
                    ["üñã –í–∏–∑—ã", {"ident": tc.TEL_VISA, "_id": kwargs["_id"],
                                "_type": tc.TEL_COORDINATION_ID}],
                    ["üëÄ –ö—Ç–æ —Å–º–æ—Ç—Ä–µ–ª", {"ident": tc.TEL_READED,
                                       "_id": kwargs["_id"],
                                       "_type": tc.TEL_COORDINATION_ID}],
                ],
                [
                    ["üìù –î–æ–∫—É–º–µ–Ω—Ç—ã", {"ident": tc.TEL_NEW_COORDINATIONS}],
                ]

            ]

        frame = self.get_data_frame(ident, _id=kwargs['_id'], login=kwargs['login'])
        if not frame.empty:
            text = frame['Info'][0]
            text = get_doc_with_notes(text, frame)
            if not frame['IsCoord'][0]:
                keyboard_items.pop(0)
            keyboard = [[InlineKeyboardButton(y[0], callback_data=get_json_params(**y[1])) for y in x]
                        for x in keyboard_items]

            return text, keyboard, []

    # –≤–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    def get_agree_coordination(self, ident, **kwargs):
        # –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π
        self.exec_empty(ident, _id=kwargs['_id'], login=kwargs['login'])
        # –≤—ã–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç "–°—á–µ—Ç–∞"
        return self.get_new_coordinations(tc.TEL_NEW_COORDINATIONS, kwargs['login'])

    # —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    def get_documents(self, ident, login, **kwargs):
        frame = self.get_data_frame(ident, login=login, **kwargs)
        text = '–ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤: {len}'.format(len=len(frame.index))
        keyboard = []
        for i, row in frame.iterrows():
            keyboard.append([
                InlineKeyboardButton(row['Code'] + ' ' +
                                     row['Description'],
                                     callback_data=get_json_params(ident=tc.TEL_DOCUMENT, _id=row['_id']))
            ])
        return text, keyboard, []

    # –¥–æ–∫—É–º–µ–Ω—Ç
    def get_document(self, ident, **kwargs):
        frame = self.get_data_frame(ident, _id=kwargs['_id'], login=kwargs['login'])
        if not frame.empty:
            text = frame['Info'][0]
            text = get_doc_with_notes(text, frame)
            keyboard = [
                [
                    InlineKeyboardButton("–§–∞–π–ª—ã",
                                         callback_data=get_json_params(
                                             ident=tc.TEL_FILES,
                                             _id=kwargs['_id'],
                                             _type=tc.TEL_DOCUMENT_ID
                                         )),
                ]]

            return text, keyboard, []

    # —Å–ø–∏—Å–æ–∫ –∫–ª–µ–∏–Ω—Ç–æ–≤
    def get_clients(self, ident, login, **kwargs):
        frame = self.get_data_frame(ident, login=login, **kwargs)
        text = '–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len}'.format(len=len(frame.index))
        keyboard = []
        for i, row in frame.iterrows():
            keyboard.append([
                InlineKeyboardButton(row['FIO'] + ' ' +
                                     row['MainPhone'],
                                     callback_data=get_json_params(ident=tc.TEL_CLIENT, _id=row['_id']))
            ])
        return text, keyboard, []

    # –¥–æ–∫—É–º–µ–Ω—Ç
    def get_client(self, ident, **kwargs):
        frame = self.get_data_frame(ident, _id=kwargs['_id'], login=kwargs['login'])
        if not frame.empty:
            text = frame['Info'][0]
            text = get_doc_with_notes(text, frame)
            keyboard = [
                [
                    InlineKeyboardButton("–§–∞–π–ª—ã",
                                         callback_data=get_json_params(
                                             ident=tc.TEL_FILES,
                                             _id=kwargs['_id'],
                                             _type=tc.TEL_CLIENT_ID
                                         )),
                ]]

            return text, keyboard, []


answers_generator = AnswersGenerator()
