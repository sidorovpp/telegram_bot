import tel_consts as tc
from generators.tel_custom_generator import CustomGenerator
from generators.tel_answers_generator import get_doc_with_notes, AnswersGenerator, get_json_params
from telegram import InlineKeyboardButton


class CoordinationsGenerator(CustomGenerator):
    def __init__(self, base_generator: AnswersGenerator):
        super().__init__(base_generator)
        self.base_generator.proc_list.update(
            {tc.TEL_COORDINATION: self.get_coordination,
             tc.TEL_AGREE_COORDINATION: self.get_agree_coordination,
             tc.TEL_DISAGREE_COORDINATION: self.get_agree_coordination,
             tc.TEL_BACK_COORDINATION: self.get_agree_coordination, })

    # –≤—ã–∑–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    async def try_call_by_id(self, ident, **kwargs):
        if ident == tc.TEL_COORDINATION_ID:
            return await self.get_coordination(tc.TEL_COORDINATION, _id=kwargs['_id'], login=kwargs['login'])
        else:
            return None

    # –¥–æ–∫—É–º–µ–Ω—Ç
    async def get_coordination(self, ident, **kwargs):
        keyboard_items = \
            [

                [
                    ["‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", {"ident": tc.TEL_AGREE_COORDINATION,
                                       "_id": kwargs["_id"],
                                       "_type": tc.TEL_COORDINATION_ID}],
                    ["‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", {"ident": tc.TEL_DISAGREE_COORDINATION,
                                     "_id": kwargs["_id"],
                                     "_type": tc.TEL_COORDINATION_ID}],
                    ["‚Ü© –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", {"ident": tc.TEL_BACK_COORDINATION,
                                        "_id": kwargs["_id"],
                                        "_type": tc.TEL_COORDINATION_ID}],
                ],
                [
                    ["üìÅ –§–∞–π–ª—ã", {"ident": tc.TEL_FILES, "_id": kwargs["_id"],
                                 "_type": tc.TEL_COORDINATION_ID}],
                    ["üñã –í–∏–∑—ã", {"ident": tc.TEL_VISA, "_id": kwargs["_id"],
                                "_type": tc.TEL_COORDINATION_ID}],
                    ["üëÄ –ö—Ç–æ —Å–º–æ—Ç—Ä–µ–ª", {"ident": tc.TEL_READED,
                                       "_id": kwargs["_id"],
                                       "_type": tc.TEL_COORDINATION_ID}],
                ],
                [
                    ["üìù –î–æ–∫—É–º–µ–Ω—Ç—ã", {"ident": tc.TEL_NEW_COORDINATIONS}],
                ]

            ]

        frame = await self.base_generator.get_data_frame(ident, _id=kwargs['_id'], login=kwargs['login'])
        if not frame.empty:
            text = frame['Info'][0]
            text = get_doc_with_notes(text, frame)
            if not frame['IsCoord'][0]:
                keyboard_items.pop(0)
            keyboard = [[InlineKeyboardButton(y[0], callback_data=get_json_params(**y[1])) for y in x]
                        for x in keyboard_items]

            return text, keyboard, []

    # –≤–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    async def get_agree_coordination(self, ident, **kwargs):
        # –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π
        await self.base_generator.exec_empty(ident, _id=kwargs['_id'], login=kwargs['login'])
        # –≤—ã–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç "–°—á–µ—Ç–∞"
        return await self.base_generator.get_item_list(tc.TEL_NEW_COORDINATIONS, login=kwargs['login'])
